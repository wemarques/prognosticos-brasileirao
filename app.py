"""
Sistema de Progn√≥sticos - Campeonato Brasileiro
Aplica√ß√£o Principal com Tratamento Robusto de Erros
"""

import streamlit as st

# IMPORTANTE: st.set_page_config() DEVE ser a PRIMEIRA chamada
st.set_page_config(
    page_title="Progn√≥sticos Brasileir√£o",
    page_icon="‚öΩ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Imports padr√£o
import sys
import os
from pathlib import Path

# Adicionar raiz ao path
ROOT_DIR = Path(__file__).parent
sys.path.insert(0, str(ROOT_DIR))

# Imports cient√≠ficos
try:
    import pandas as pd
    import numpy as np
    import plotly.graph_objects as go
    import plotly.express as px
    SCIENTIFIC_IMPORTS_OK = True
except ImportError as e:
    st.error(f"‚ùå Erro ao importar bibliotecas cient√≠ficas: {e}")
    SCIENTIFIC_IMPORTS_OK = False

# Verificar quais m√≥dulos internos existem
MODULES_AVAILABLE = {
    'collector': False,
    'calculator': False,
    'value_detector': False,
    'api_validator': False
}

# Tentar importar m√≥dulos internos (sem quebrar se n√£o existirem)
try:
    from data.collector import FootballDataCollector
    MODULES_AVAILABLE['collector'] = True
except Exception as e:
    st.sidebar.warning(f"‚ö†Ô∏è data.collector n√£o dispon√≠vel")

try:
    from analysis.calculator import PrognosisCalculator
    MODULES_AVAILABLE['calculator'] = True
except Exception as e:
    st.sidebar.warning(f"‚ö†Ô∏è analysis.calculator n√£o dispon√≠vel")

try:
    from analysis.value_detector import ValueBetDetector
    MODULES_AVAILABLE['value_detector'] = True
except Exception as e:
    st.sidebar.warning(f"‚ö†Ô∏è analysis.value_detector n√£o dispon√≠vel")

try:
    from utils.api_validator import APIValidator
    MODULES_AVAILABLE['api_validator'] = True
except Exception as e:
    st.sidebar.warning(f"‚ö†Ô∏è utils.api_validator n√£o dispon√≠vel")


# CSS Customizado
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        color: #1f77b4;
        padding: 1rem 0;
    }
    .stAlert {
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)


def show_system_status():
    """Mostra status do sistema na sidebar"""
    with st.sidebar:
        st.header("üîß Status do Sistema")
        
        # Imports cient√≠ficos
        if SCIENTIFIC_IMPORTS_OK:
            st.success("‚úÖ Bibliotecas cient√≠ficas OK")
        else:
            st.error("‚ùå Bibliotecas cient√≠ficas com erro")
        
        # M√≥dulos internos
        st.subheader("üì¶ M√≥dulos Internos")
        for module, available in MODULES_AVAILABLE.items():
            if available:
                st.success(f"‚úÖ {module}")
            else:
                st.error(f"‚ùå {module}")
        
        # Modo de opera√ß√£o
        st.markdown("---")
        if all(MODULES_AVAILABLE.values()):
            st.info("üöÄ **Modo:** Produ√ß√£o completa")
        else:
            st.warning("üß™ **Modo:** Demonstra√ß√£o (m√≥dulos faltando)")


def main():
    """Fun√ß√£o principal"""
    
    # Header
    st.markdown('<h1 class="main-header">‚öΩ Progn√≥sticos Brasileir√£o</h1>', 
                unsafe_allow_html=True)
    st.markdown("---")
    
    # Status na sidebar
    show_system_status()
    
    # Sidebar - Configura√ß√µes
    with st.sidebar:
        st.markdown("---")
        st.header("‚öôÔ∏è Configura√ß√µes")
        
        use_mock = st.checkbox(
            "üß™ Usar dados simulados",
            value=True,
            help="Marque para testar sem API"
        )
    
    # Conte√∫do principal
    if not SCIENTIFIC_IMPORTS_OK:
        st.error("‚ùå Sistema indispon√≠vel - bibliotecas cient√≠ficas n√£o carregadas")
        st.info("üí° Verifique se pandas, numpy e plotly est√£o instalados")
        return
    
    # Interface principal
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üè† Time Mandante")
        home_team = st.selectbox(
            "Selecione o time da casa",
            ["Flamengo", "Palmeiras", "Corinthians", "S√£o Paulo",
             "Atl√©tico-MG", "Fluminense", "Internacional", "Gr√™mio",
             "Botafogo", "Cruzeiro", "Vasco", "Santos",
             "Athletico-PR", "Fortaleza", "Bahia", "Goi√°s",
             "Coritiba", "Cuiab√°", "Am√©rica-MG", "Bragantino"],
            key="home"
        )
    
    with col2:
        st.subheader("‚úàÔ∏è Time Visitante")
        away_team = st.selectbox(
            "Selecione o time visitante",
            ["Flamengo", "Palmeiras", "Corinthians", "S√£o Paulo",
             "Atl√©tico-MG", "Fluminense", "Internacional", "Gr√™mio",
             "Botafogo", "Cruzeiro", "Vasco", "Santos",
             "Athletico-PR", "Fortaleza", "Bahia", "Goi√°s",
             "Coritiba", "Cuiab√°", "Am√©rica-MG", "Bragantino"],
            index=1,
            key="away"
        )
    
    st.markdown("---")
    
    # Configura√ß√µes avan√ßadas
    with st.expander("‚öôÔ∏è Configura√ß√µes Avan√ßadas"):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            distance = st.slider("üìç Dist√¢ncia (km)", 0, 3000, 1000)
        with col2:
            altitude = st.slider("‚õ∞Ô∏è Altitude (m)", 0, 1000, 500)
        with col3:
            match_type = st.selectbox(
                "üèÜ Tipo de Confronto",
                ["Normal", "Cl√°ssico", "Derby"]
            )
    
    # Bot√£o de an√°lise
    if st.button("üîÆ GERAR PROGN√ìSTICO", type="primary", use_container_width=True):
        
        if home_team == away_team:
            st.error("‚ùå Selecione times diferentes!")
            return
        
        with st.spinner("Processando an√°lise..."):
            
            # Se todos m√≥dulos dispon√≠veis, usar l√≥gica real
            if all(MODULES_AVAILABLE.values()) and not use_mock:
                try:
                    st.info("üîÑ Usando m√≥dulos reais (implementa√ß√£o pendente)")
                    # Aqui viria a l√≥gica real quando os m√≥dulos estiverem prontos
                    # collector = FootballDataCollector()
                    # calculator = PrognosisCalculator()
                    # results = calculator.calculate(home_team, away_team)
                    
                    st.warning("‚ö†Ô∏è M√≥dulos reais ainda n√£o implementados completamente")
                    st.info("üí° Usando dados simulados por enquanto")
                    
                except Exception as e:
                    st.error(f"‚ùå Erro ao processar: {e}")
                    st.info("üí° Usando dados simulados como fallback")
            
            # Resultados simulados (sempre funciona)
            st.success(f"‚úÖ An√°lise: **{home_team}** vs **{away_team}**")
            
            # M√©tricas
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    "üè† Vit√≥ria Mandante",
                    "45.2%",
                    "+2.3%",
                    help="Probabilidade de vit√≥ria do time da casa"
                )
            
            with col2:
                st.metric(
                    "ü§ù Empate",
                    "28.5%",
                    "-1.1%",
                    help="Probabilidade de empate"
                )
            
            with col3:
                st.metric(
                    "‚úàÔ∏è Vit√≥ria Visitante",
                    "26.3%",
                    "-1.2%",
                    help="Probabilidade de vit√≥ria do time visitante"
                )
            
            # Gr√°fico de probabilidades
            st.subheader("üìä Distribui√ß√£o de Probabilidades")
            
            fig = go.Figure(data=[
                go.Bar(
                    x=['Vit√≥ria Casa', 'Empate', 'Vit√≥ria Fora'],
                    y=[45.2, 28.5, 26.3],
                    marker_color=['#1f77b4', '#ff7f0e', '#d62728'],
                    text=['45.2%', '28.5%', '26.3%'],
                    textposition='auto'
                )
            ])
            
            fig.update_layout(
                title="Probabilidades do Resultado",
                yaxis_title="Probabilidade (%)",
                showlegend=False,
                height=400
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Placares prov√°veis
            st.subheader("üéØ Placares Mais Prov√°veis")
            
            scores_data = {
                'Placar': ['2-1', '1-1', '2-0', '1-0', '2-2'],
                'Probabilidade': [12.5, 11.8, 10.2, 9.5, 8.1],
                'Odd T√≠pica': [7.5, 6.0, 8.0, 6.5, 9.5]
            }
            
            df = pd.DataFrame(scores_data)
            st.dataframe(
                df,
                use_container_width=True
                hide_index=true
            )
    
    # Informa√ß√µes adicionais
    with st.expander("‚ÑπÔ∏è Sobre o Sistema"):
        st.markdown("""
        ### üìä Sistema de Progn√≥sticos Brasileir√£o
        
        **Modelos Utilizados:**
        - Dixon-Coles (Poisson bivariada)
        - Monte Carlo (50k simula√ß√µes)
        - Calibra√ß√£o espec√≠fica do Brasileir√£o
        
        **Par√¢metros:**
        - HFA (Home Field Advantage): 1.53
        - M√©dia de gols: 1.82 por time
        - Correla√ß√£o: -0.11
        
        **Status Atual:**
        - Interface: ‚úÖ Funcional
        - Dados simulados: ‚úÖ Dispon√≠vel
        - M√≥dulos reais: ‚è≥ Em desenvolvimento
        
        ‚ö†Ô∏è **Aviso:** Sistema para fins educacionais.
        """)
    
    # Rodap√©
    st.markdown("---")
    st.caption("Sistema de Progn√≥sticos Brasileir√£o - v2.0 (Modo Robusto)")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        st.error(f"‚ùå Erro cr√≠tico: {e}")
        
        with st.expander("üêõ Detalhes do Erro"):
            import traceback
            st.code(traceback.format_exc())
        
        st.info("""
        üí° **Como resolver:**
        1. Verifique se todos os m√≥dulos est√£o presentes
2. Verifique erros de sintaxe nos arquivos Python
        3. Consulte os logs do Streamlit Cloud
        """)
